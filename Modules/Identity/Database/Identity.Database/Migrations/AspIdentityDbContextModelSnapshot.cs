// <auto-generated />
using System;
using BooksReviewApp.Services.AspNet.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BooksReviewApp.Services.AspNet.Identity.Migrations
{
    [DbContext(typeof(AspIdentityDbContext))]
    partial class AspIdentityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BooksReviewApp.Services.AspNet.Identity.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", "identity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("18ba8366-df77-441f-9154-1c897892c449"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ae7eab38-d437-4775-be6c-a10efd4c2719",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEFIo2mlWB5MA3Ow5cf1pzQrdHCI4RFeE0F0fsfRhoivSuN9N8CGbOhS2EohkBHZbDA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("BooksReviewApp.Services.AspNet.Identity.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.ToTable("Permissions", "identity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a84a2483-2359-4f81-94fd-c8b1803190e1"),
                            Name = "Authors.Get"
                        },
                        new
                        {
                            Id = new Guid("a8ff26a0-dd03-41c4-acc5-48fcc4fe6615"),
                            Name = "Authors.Create"
                        },
                        new
                        {
                            Id = new Guid("93222dbf-28e8-4979-a2e6-fd9698195e3f"),
                            Name = "Authors.Update"
                        },
                        new
                        {
                            Id = new Guid("b7f21859-e59c-41de-9ad3-6e918bae7565"),
                            Name = "Authors.Patch"
                        },
                        new
                        {
                            Id = new Guid("554573c9-ca90-45c8-a0e2-cab8d5943964"),
                            Name = "Authors.Delete"
                        },
                        new
                        {
                            Id = new Guid("c5c7a85d-a34f-4f84-857a-fe5a8dbc24ff"),
                            Name = "Books.Get"
                        },
                        new
                        {
                            Id = new Guid("9b3a2a17-4701-452d-b396-73b8734310ba"),
                            Name = "Books.Create"
                        },
                        new
                        {
                            Id = new Guid("65532f22-11a2-40cb-8db1-4b0618b5dce3"),
                            Name = "Books.Update"
                        },
                        new
                        {
                            Id = new Guid("1c56d3d8-2b1d-445a-b3fc-24a19523e936"),
                            Name = "Books.Patch"
                        },
                        new
                        {
                            Id = new Guid("a9371e4f-c1c2-4d03-af1e-39c0a7142434"),
                            Name = "Books.Delete"
                        },
                        new
                        {
                            Id = new Guid("45aa88a0-be42-43ee-aa23-af538042ab3f"),
                            Name = "Favorites.Get"
                        },
                        new
                        {
                            Id = new Guid("58760ef0-6751-4e9c-b827-dd014298f786"),
                            Name = "Favorites.Create"
                        },
                        new
                        {
                            Id = new Guid("6556bb1e-6560-481d-b73e-d571db1ae43b"),
                            Name = "Favorites.Update"
                        },
                        new
                        {
                            Id = new Guid("1cb21d11-a540-4e64-8f06-1c22f06d7b68"),
                            Name = "Favorites.Patch"
                        },
                        new
                        {
                            Id = new Guid("ffef47e7-3610-46b7-aa01-5b875c776727"),
                            Name = "Favorites.Delete"
                        },
                        new
                        {
                            Id = new Guid("11ba0a82-3139-4794-a5a5-51fb3ad66a0e"),
                            Name = "Genres.Get"
                        },
                        new
                        {
                            Id = new Guid("d62d4bf4-b28a-4cb0-aead-159c91c92e88"),
                            Name = "Genres.Create"
                        },
                        new
                        {
                            Id = new Guid("b38cee8f-1ef5-472b-8f96-ba1fc0973700"),
                            Name = "Genres.Update"
                        },
                        new
                        {
                            Id = new Guid("6536b465-b4af-4960-a8a2-06a5c67adcca"),
                            Name = "Genres.Patch"
                        },
                        new
                        {
                            Id = new Guid("959496b3-c78b-4017-97d3-7945ded029b5"),
                            Name = "Genres.Delete"
                        },
                        new
                        {
                            Id = new Guid("4f4252aa-561d-40dc-a9ef-036fe70b2656"),
                            Name = "Reviews.Get"
                        },
                        new
                        {
                            Id = new Guid("f3f85d3b-4eb6-41f1-b127-0c658b7335fc"),
                            Name = "Reviews.Create"
                        },
                        new
                        {
                            Id = new Guid("e7d86a4c-4c6d-4edc-aea0-4758993370fe"),
                            Name = "Reviews.Update"
                        },
                        new
                        {
                            Id = new Guid("892e56cc-3278-4edd-b1a5-d5c1dec99f77"),
                            Name = "Reviews.Patch"
                        },
                        new
                        {
                            Id = new Guid("8196071f-e1d5-4051-a12f-39235a9efb7c"),
                            Name = "Reviews.Delete"
                        },
                        new
                        {
                            Id = new Guid("4515481c-c9fe-41d8-a778-4e9cdb0c35e1"),
                            Name = "Roles.Get"
                        },
                        new
                        {
                            Id = new Guid("dfef951c-c93d-4e4c-b160-3ca793831d63"),
                            Name = "Roles.Create"
                        },
                        new
                        {
                            Id = new Guid("310fa979-81ea-4fce-b9a0-b6b27b6cc738"),
                            Name = "Roles.Update"
                        },
                        new
                        {
                            Id = new Guid("1c4d832f-6f3a-4286-b1cd-9bb4e0c235e2"),
                            Name = "Roles.Patch"
                        },
                        new
                        {
                            Id = new Guid("07a1f42c-cbb5-4286-8fbc-aa4d61caba40"),
                            Name = "Roles.Delete"
                        },
                        new
                        {
                            Id = new Guid("7a877756-dc3f-4858-b531-27ccb09f804a"),
                            Name = "Users.Get"
                        },
                        new
                        {
                            Id = new Guid("e603110e-790c-4770-b547-34b108016761"),
                            Name = "Users.Create"
                        },
                        new
                        {
                            Id = new Guid("78570082-e155-4d0e-b4b8-df900c76a439"),
                            Name = "Users.Update"
                        },
                        new
                        {
                            Id = new Guid("fb166784-c775-480f-8621-3aa26d33c755"),
                            Name = "Users.Patch"
                        },
                        new
                        {
                            Id = new Guid("6f0aee01-6a62-4a9d-8387-41088f34a719"),
                            Name = "Users.Delete"
                        });
                });

            modelBuilder.Entity("BooksReviewApp.Services.AspNet.Identity.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", "identity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a2c0f0d5-405e-4f3d-a77d-9a5efb6f7c41"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("BooksReviewApp.Services.AspNet.Identity.Entities.RolePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "identity");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("18ba8366-df77-441f-9154-1c897892c449"),
                            RoleId = new Guid("a2c0f0d5-405e-4f3d-a77d-9a5efb6f7c41")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "identity");
                });

            modelBuilder.Entity("BooksReviewApp.Services.AspNet.Identity.Entities.RolePermission", b =>
                {
                    b.HasOne("BooksReviewApp.Services.AspNet.Identity.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BooksReviewApp.Services.AspNet.Identity.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("BooksReviewApp.Services.AspNet.Identity.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("BooksReviewApp.Services.AspNet.Identity.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("BooksReviewApp.Services.AspNet.Identity.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("BooksReviewApp.Services.AspNet.Identity.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BooksReviewApp.Services.AspNet.Identity.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("BooksReviewApp.Services.AspNet.Identity.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BooksReviewApp.Services.AspNet.Identity.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("BooksReviewApp.Services.AspNet.Identity.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
